name: Test Suite

on:
  workflow_dispatch:
  # Trigger analysis when pushing in master or pull requests, and when creating
  # a pull request.
  push:
    branches:
      - main
  pull_request:
      types: [opened, synchronize, reopened]

jobs:
  test-suite:
    runs-on: ubuntu-latest
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      - name: Install project
        run: poetry install --no-interaction

      #----------------------------------------------
      #             run linter
      #----------------------------------------------
      - name: Run Linter
        run: |
          source .venv/bin/activate
          poetry run pylint --fail-under=9 src/

      #----------------------------------------------
      #              run test suite
      #----------------------------------------------
      - name: Run Unit Tests
        run: |
          source .venv/bin/activate
          poetry run pytest --cov-report term --cov-report xml:coverage.xml --cov=iracing_client tests/unit || if [ $? -eq 5 ]; then exit 0; fi

      - name: Run Integration Tests
        env:
          IRACING_USERNAME: ${{ secrets.IRACING_USERNAME }}
          IRACING_PASSWORD: ${{ secrets.IRACING_PASSWORD }}
          IRACING_MEMBER_ID: ${{ secrets.IRACING_MEMBER_ID }}
        run: |
          source .venv/bin/activate
          poetry run pytest --cov-report term --cov-report xml:coverage.xml --cov=iracing_client --cov-append tests/integration || if [ $? -eq 5 ]; then exit 0; fi

      - name: Archive code coverage results
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage-report
          path: coverage.xml
          retention-days: 7

      #----------------------------------------------
      #              perform static analysis
      #----------------------------------------------
      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      #----------------------------------------------
      #              check quality gate
      #----------------------------------------------
      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        # Force to fail step after specific time.
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
