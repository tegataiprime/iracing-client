name: Test Suite

on:
  workflow_dispatch:
  # Trigger analysis when pushing in master or pull requests, and when creating
  # a pull request.
  push:
    branches:
      - main
  pull_request:
      types: [opened, synchronize, reopened]

jobs:
  test-suite:
    runs-on: ubuntu-latest
    steps:
      #----------------------------------------------
      # Check-out Repo
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v4
     
      #----------------------------------------------
      # Initilize Build Environment
      #----------------------------------------------
      - name: Initialize Build Environment
        uses: ./.github/actions/poetry-initialize-action
        with:
          python-version: '3.10'

      #----------------------------------------------
      # Check for Lint
      #----------------------------------------------
      - name: Run Linter
        run: |
          source .venv/bin/activate
          poetry run pylint --fail-under=9 src/

      #----------------------------------------------
      # Run Test Suite
      #----------------------------------------------
      - name: Run Unit Tests
        run: |
          source .venv/bin/activate
          poetry run pytest --cov-report term --cov-report xml:coverage.xml --cov=iracing_client tests/unit || if [ $? -eq 5 ]; then exit 0; fi

      - name: Run Integration Tests
        env:
          IRACING_USERNAME: ${{ secrets.IRACING_USERNAME }}
          IRACING_PASSWORD: ${{ secrets.IRACING_PASSWORD }}
          IRACING_MEMBER_ID: ${{ secrets.IRACING_MEMBER_ID }}
        run: |
          source .venv/bin/activate
          poetry run pytest --cov-report term --cov-report xml:coverage.xml --cov=iracing_client --cov-append tests/integration || if [ $? -eq 5 ]; then exit 0; fi

      - name: Archive code coverage results
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report
          path: coverage.xml
          retention-days: 7

      #----------------------------------------------
      # Perform Static Code Analysis
      #----------------------------------------------
      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      #----------------------------------------------
      # Check Quality Gate
      #----------------------------------------------
      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        # Force to fail step after specific time.
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      #----------------------------------------------
      # CodeCov
      #----------------------------------------------
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5.4.0
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: tegataiprime/iracing-client